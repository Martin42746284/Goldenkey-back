generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Department {
  hotel
  restaurant
  pub
  spa
}

enum Role {
  ADMIN
  MANAGER
  RECEPTION
  HOUSEKEEPING
  KITCHEN
  WAITER
  BARTENDER
  CASHIER
  GUEST
}

enum Unit {
  piece
  kg
  g
  L
  cl
  ml
}

enum StockMoveType {
  IN
  OUT
  ADJUST
}

enum RoomStatus {
  available
  occupied
  cleaning
  maintenance
  out_of_order
}

enum ReservationStatus {
  booked
  checked_in
  checked_out
  cancelled
  no_show
}

enum OrderStatus {
  open
  closed
  cancelled
}

enum FireStatus {
  commanded
  preparing
  ready
  delivered
  voided
}

enum TabStatus {
  open
  unpaid
  paid
}

enum AppointmentStatus {
  booked
  waiting
  in_progress
  completed
  no_show
  cancelled
}

enum CashStatus {
  open
  closed
}

enum PaymentMethod {
  cash
  card
  mobile
  bank
}

enum Segment {
  vip
  corporate
  leisure
  ota
}

enum LoyaltyTier {
  Bronze
  Silver
  Gold
  Platinum
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  name           String?
  role           Role            @default(ADMIN)
  password       String
  stockMovements StockMovement[]
  appointments   Appointment[]
  staffSlots     StaffSlot[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Store {
  id         Int             @id @default(autoincrement())
  name       String
  department Department
  stocks     Stock[]
  moves      StockMovement[]
}

model Item {
  id               Int             @id @default(autoincrement())
  sku              String          @unique
  name             String
  unit             Unit
  vatRate          Int
  costPrice        Int
  salePriceDefault Int
  isActive         Boolean         @default(true)
  isMenu           Boolean         @default(false)
  menuDept         Department?
  stocks           Stock[]
  stockMovements   StockMovement[]
  orderLines       OrderLine[]
}

model Stock {
  id        Int      @id @default(autoincrement())
  store     Store    @relation(fields: [storeId], references: [id])
  storeId   Int
  item      Item     @relation(fields: [itemId], references: [id])
  itemId    Int
  qty       Int      @default(0)
  minQty    Int      @default(0)
  maxQty    Int      @default(100)
  updatedAt DateTime @updatedAt

  @@unique([storeId, itemId], name: "stock_unique")
}

model StockMovement {
  id        Int           @id @default(autoincrement())
  store     Store         @relation(fields: [storeId], references: [id])
  storeId   Int
  item      Item          @relation(fields: [itemId], references: [id])
  itemId    Int
  qty       Int
  type      StockMoveType
  reason    String?
  user      User?         @relation(fields: [userId], references: [id])
  userId    Int?
  createdAt DateTime      @default(now())
}

model Room {
  id           Int           @id @default(autoincrement())
  number       String        @unique
  type         String
  status       RoomStatus
  reservations Reservation[]
}

model Guest {
  id            Int           @id @default(autoincrement())
  fullName      String
  phone         String?
  email         String?
  notes         String?
  nationality   String?
  address       String?
  company       String?
  birthDate     DateTime?
  segment       Segment       @default(leisure)
  loyaltyPoints Int           @default(0)
  loyaltyTier   LoyaltyTier   @default(Bronze)
  reservations  Reservation[]
}

model Reservation {
  id        Int               @id @default(autoincrement())
  room      Room              @relation(fields: [roomId], references: [id])
  roomId    Int
  guest     Guest             @relation(fields: [guestId], references: [id])
  guestId   Int
  checkIn   DateTime
  checkOut  DateTime
  status    ReservationStatus
  rate      Int
  folio     Folio?
  createdAt DateTime          @default(now())
}

model Folio {
  id            Int           @id @default(autoincrement())
  reservation   Reservation   @relation(fields: [reservationId], references: [id])
  reservationId Int           @unique
  charges       FolioCharge[]
  payments      Payment[]
  total         Int           @default(0)
  balance       Int           @default(0)
  closedAt      DateTime?
}

model FolioCharge {
  id          Int        @id @default(autoincrement())
  folio       Folio      @relation(fields: [folioId], references: [id])
  folioId     Int
  description String
  qty         Int        @default(1)
  unitPrice   Int
  department  Department
  createdAt   DateTime   @default(now())
}

model DiningTable {
  id         Int        @id @default(autoincrement())
  code       String     @unique
  department Department
  orders     Order[]
}

model Order {
  id       Int          @id @default(autoincrement())
  dept     Department
  table    DiningTable? @relation(fields: [tableId], references: [id])
  tableId  Int?
  status   OrderStatus  @default(open)
  openedAt DateTime     @default(now())
  closedAt DateTime?
  lines    OrderLine[]
  payments Payment[]
  tab      Tab?         @relation(fields: [tabId], references: [id])
  tabId    Int?
}

model OrderLine {
  id         Int        @id @default(autoincrement())
  order      Order      @relation(fields: [orderId], references: [id])
  orderId    Int
  item       Item       @relation(fields: [itemId], references: [id])
  itemId     Int
  itemName   String
  qty        Int
  unitPrice  Int
  fireStatus FireStatus @default(commanded)
  firedAt    DateTime   @default(now())
}

model Tab {
  id           Int        @id @default(autoincrement())
  dept         Department @default(pub)
  customerName String
  status       TabStatus  @default(open)
  balance      Int        @default(0)
  orders       Order[]
  payments     Payment[]
}

model Appointment {
  id          Int               @id @default(autoincrement())
  clientName  String
  serviceName String
  start       DateTime
  durationMin Int
  status      AppointmentStatus @default(booked)
  price       Int
  room        String?
  therapist   User?             @relation(fields: [therapistId], references: [id])
  therapistId Int?
  createdAt   DateTime          @default(now())
}

model CashSession {
  id            Int        @id @default(autoincrement())
  department    Department
  openedBy      String
  openedAt      DateTime   @default(now())
  openingFloat  Int
  status        CashStatus @default(open)
  closedAt      DateTime?
  closingAmount Int?
  payments      Payment[]
}

model Payment {
  id            Int           @id @default(autoincrement())
  amount        Int
  method        PaymentMethod
  receivedAt    DateTime      @default(now())
  department    Department
  order         Order?        @relation(fields: [orderId], references: [id])
  orderId       Int?
  folio         Folio?        @relation(fields: [folioId], references: [id])
  folioId       Int?
  tab           Tab?          @relation(fields: [tabId], references: [id])
  tabId         Int?
  cashSession   CashSession?  @relation(fields: [cashSessionId], references: [id])
  cashSessionId Int?
  reference     String?
}

model Invoice {
  id            Int           @id @default(autoincrement())
  number        String        @unique
  date          DateTime      @default(now())
  department    Department
  customerName  String?
  lines         InvoiceLine[]
  totalHT       Int
  totalTVA      Int
  totalTTC      Int
  sourceOrderId Int?
  sourceFolioId Int?
  pdfUrl        String?
}

model InvoiceLine {
  id          Int     @id @default(autoincrement())
  invoice     Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId   Int
  description String
  qty         Int
  unitPrice   Int
  vatRate     Int
  total       Int
}

model TaxRate {
  id   Int    @id @default(autoincrement())
  name String
  rate Int
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  entity      String
  entityId    Int?
  action      String
  performedBy String?
  createdAt   DateTime @default(now())
  data        Json?
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  body      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Service {
  id          Int        @id @default(autoincrement())
  name        String
  durationMin Int
  dept        Department @default(spa)
  salePrice   Int
  active      Boolean    @default(true)
}

model StaffSlot {
  id        Int      @id @default(autoincrement())
  staff     User     @relation(fields: [staffId], references: [id])
  staffId   Int
  start     DateTime
  end       DateTime
  status    String   @default("available")
  createdAt DateTime @default(now())
}
