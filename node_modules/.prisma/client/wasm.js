
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  role: 'role',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StoreScalarFieldEnum = {
  id: 'id',
  name: 'name',
  department: 'department'
};

exports.Prisma.ItemScalarFieldEnum = {
  id: 'id',
  sku: 'sku',
  name: 'name',
  unit: 'unit',
  vatRate: 'vatRate',
  costPrice: 'costPrice',
  salePriceDefault: 'salePriceDefault',
  isActive: 'isActive',
  isMenu: 'isMenu',
  menuDept: 'menuDept'
};

exports.Prisma.StockScalarFieldEnum = {
  id: 'id',
  storeId: 'storeId',
  itemId: 'itemId',
  qty: 'qty',
  minQty: 'minQty',
  maxQty: 'maxQty',
  updatedAt: 'updatedAt'
};

exports.Prisma.StockMovementScalarFieldEnum = {
  id: 'id',
  storeId: 'storeId',
  itemId: 'itemId',
  qty: 'qty',
  type: 'type',
  reason: 'reason',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.RoomScalarFieldEnum = {
  id: 'id',
  number: 'number',
  type: 'type',
  status: 'status'
};

exports.Prisma.GuestScalarFieldEnum = {
  id: 'id',
  fullName: 'fullName',
  phone: 'phone',
  email: 'email',
  notes: 'notes',
  nationality: 'nationality',
  address: 'address',
  company: 'company',
  birthDate: 'birthDate',
  segment: 'segment',
  loyaltyPoints: 'loyaltyPoints',
  loyaltyTier: 'loyaltyTier'
};

exports.Prisma.ReservationScalarFieldEnum = {
  id: 'id',
  roomId: 'roomId',
  guestId: 'guestId',
  checkIn: 'checkIn',
  checkOut: 'checkOut',
  status: 'status',
  rate: 'rate',
  createdAt: 'createdAt'
};

exports.Prisma.FolioScalarFieldEnum = {
  id: 'id',
  reservationId: 'reservationId',
  total: 'total',
  balance: 'balance',
  closedAt: 'closedAt'
};

exports.Prisma.FolioChargeScalarFieldEnum = {
  id: 'id',
  folioId: 'folioId',
  description: 'description',
  qty: 'qty',
  unitPrice: 'unitPrice',
  department: 'department',
  createdAt: 'createdAt'
};

exports.Prisma.DiningTableScalarFieldEnum = {
  id: 'id',
  code: 'code',
  department: 'department'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  dept: 'dept',
  tableId: 'tableId',
  status: 'status',
  openedAt: 'openedAt',
  closedAt: 'closedAt',
  tabId: 'tabId'
};

exports.Prisma.OrderLineScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  itemId: 'itemId',
  itemName: 'itemName',
  qty: 'qty',
  unitPrice: 'unitPrice',
  fireStatus: 'fireStatus',
  firedAt: 'firedAt'
};

exports.Prisma.TabScalarFieldEnum = {
  id: 'id',
  dept: 'dept',
  customerName: 'customerName',
  status: 'status',
  balance: 'balance'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  clientName: 'clientName',
  serviceName: 'serviceName',
  start: 'start',
  durationMin: 'durationMin',
  status: 'status',
  price: 'price',
  room: 'room',
  therapistId: 'therapistId',
  createdAt: 'createdAt'
};

exports.Prisma.CashSessionScalarFieldEnum = {
  id: 'id',
  department: 'department',
  openedBy: 'openedBy',
  openedAt: 'openedAt',
  openingFloat: 'openingFloat',
  status: 'status',
  closedAt: 'closedAt',
  closingAmount: 'closingAmount'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  method: 'method',
  receivedAt: 'receivedAt',
  department: 'department',
  orderId: 'orderId',
  folioId: 'folioId',
  tabId: 'tabId',
  cashSessionId: 'cashSessionId',
  reference: 'reference'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  number: 'number',
  date: 'date',
  department: 'department',
  customerName: 'customerName',
  totalHT: 'totalHT',
  totalTVA: 'totalTVA',
  totalTTC: 'totalTTC',
  sourceOrderId: 'sourceOrderId',
  sourceFolioId: 'sourceFolioId',
  pdfUrl: 'pdfUrl'
};

exports.Prisma.InvoiceLineScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  description: 'description',
  qty: 'qty',
  unitPrice: 'unitPrice',
  vatRate: 'vatRate',
  total: 'total'
};

exports.Prisma.TaxRateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  rate: 'rate'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  entity: 'entity',
  entityId: 'entityId',
  action: 'action',
  performedBy: 'performedBy',
  createdAt: 'createdAt',
  data: 'data'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  body: 'body',
  read: 'read',
  createdAt: 'createdAt'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  durationMin: 'durationMin',
  dept: 'dept',
  salePrice: 'salePrice',
  active: 'active'
};

exports.Prisma.StaffSlotScalarFieldEnum = {
  id: 'id',
  staffId: 'staffId',
  start: 'start',
  end: 'end',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  RECEPTION: 'RECEPTION',
  HOUSEKEEPING: 'HOUSEKEEPING',
  KITCHEN: 'KITCHEN',
  WAITER: 'WAITER',
  BARTENDER: 'BARTENDER',
  CASHIER: 'CASHIER',
  GUEST: 'GUEST'
};

exports.Department = exports.$Enums.Department = {
  hotel: 'hotel',
  restaurant: 'restaurant',
  pub: 'pub',
  spa: 'spa'
};

exports.Unit = exports.$Enums.Unit = {
  piece: 'piece',
  kg: 'kg',
  g: 'g',
  L: 'L',
  cl: 'cl',
  ml: 'ml'
};

exports.StockMoveType = exports.$Enums.StockMoveType = {
  IN: 'IN',
  OUT: 'OUT',
  ADJUST: 'ADJUST'
};

exports.RoomStatus = exports.$Enums.RoomStatus = {
  available: 'available',
  occupied: 'occupied',
  cleaning: 'cleaning',
  maintenance: 'maintenance',
  out_of_order: 'out_of_order'
};

exports.Segment = exports.$Enums.Segment = {
  vip: 'vip',
  corporate: 'corporate',
  leisure: 'leisure',
  ota: 'ota'
};

exports.LoyaltyTier = exports.$Enums.LoyaltyTier = {
  Bronze: 'Bronze',
  Silver: 'Silver',
  Gold: 'Gold',
  Platinum: 'Platinum'
};

exports.ReservationStatus = exports.$Enums.ReservationStatus = {
  booked: 'booked',
  checked_in: 'checked_in',
  checked_out: 'checked_out',
  cancelled: 'cancelled',
  no_show: 'no_show'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  open: 'open',
  closed: 'closed',
  cancelled: 'cancelled'
};

exports.FireStatus = exports.$Enums.FireStatus = {
  commanded: 'commanded',
  preparing: 'preparing',
  ready: 'ready',
  delivered: 'delivered',
  voided: 'voided'
};

exports.TabStatus = exports.$Enums.TabStatus = {
  open: 'open',
  unpaid: 'unpaid',
  paid: 'paid'
};

exports.AppointmentStatus = exports.$Enums.AppointmentStatus = {
  booked: 'booked',
  waiting: 'waiting',
  in_progress: 'in_progress',
  completed: 'completed',
  no_show: 'no_show',
  cancelled: 'cancelled'
};

exports.CashStatus = exports.$Enums.CashStatus = {
  open: 'open',
  closed: 'closed'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  cash: 'cash',
  card: 'card',
  mobile: 'mobile',
  bank: 'bank'
};

exports.Prisma.ModelName = {
  User: 'User',
  Store: 'Store',
  Item: 'Item',
  Stock: 'Stock',
  StockMovement: 'StockMovement',
  Room: 'Room',
  Guest: 'Guest',
  Reservation: 'Reservation',
  Folio: 'Folio',
  FolioCharge: 'FolioCharge',
  DiningTable: 'DiningTable',
  Order: 'Order',
  OrderLine: 'OrderLine',
  Tab: 'Tab',
  Appointment: 'Appointment',
  CashSession: 'CashSession',
  Payment: 'Payment',
  Invoice: 'Invoice',
  InvoiceLine: 'InvoiceLine',
  TaxRate: 'TaxRate',
  AuditLog: 'AuditLog',
  Notification: 'Notification',
  Service: 'Service',
  StaffSlot: 'StaffSlot'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
